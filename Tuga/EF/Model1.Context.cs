//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tuga.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddIngridient> AddIngridient { get; set; }
        public virtual DbSet<AdditionalPhotos> AdditionalPhotos { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ComplimentaryDish> ComplimentaryDish { get; set; }
        public virtual DbSet<Dish> Dish { get; set; }
        public virtual DbSet<DishIngridient> DishIngridient { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<IDTable> IDTable { get; set; }
        public virtual DbSet<Ingridient> Ingridient { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderDish> OrderDish { get; set; }
        public virtual DbSet<RemoveIngridient> RemoveIngridient { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        [DbFunction("Entities", "FUNC_COUNT_MAX_ORDERABLE_DAY_OF_WEEK")]
        public virtual IQueryable<FUNC_COUNT_MAX_ORDERABLE_DAY_OF_WEEK_Result> FUNC_COUNT_MAX_ORDERABLE_DAY_OF_WEEK(Nullable<System.DateTime> date_of_begin, Nullable<System.DateTime> date_of_end)
        {
            var date_of_beginParameter = date_of_begin.HasValue ?
                new ObjectParameter("date_of_begin", date_of_begin) :
                new ObjectParameter("date_of_begin", typeof(System.DateTime));
    
            var date_of_endParameter = date_of_end.HasValue ?
                new ObjectParameter("date_of_end", date_of_end) :
                new ObjectParameter("date_of_end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FUNC_COUNT_MAX_ORDERABLE_DAY_OF_WEEK_Result>("[Entities].[FUNC_COUNT_MAX_ORDERABLE_DAY_OF_WEEK](@date_of_begin, @date_of_end)", date_of_beginParameter, date_of_endParameter);
        }
    
        [DbFunction("Entities", "FUNC_COUNT_MOST_ORDERABLE_DAY_OF_WEEK")]
        public virtual IQueryable<FUNC_COUNT_MOST_ORDERABLE_DAY_OF_WEEK_Result> FUNC_COUNT_MOST_ORDERABLE_DAY_OF_WEEK(Nullable<System.DateTime> date_of_begin, Nullable<System.DateTime> date_of_end)
        {
            var date_of_beginParameter = date_of_begin.HasValue ?
                new ObjectParameter("date_of_begin", date_of_begin) :
                new ObjectParameter("date_of_begin", typeof(System.DateTime));
    
            var date_of_endParameter = date_of_end.HasValue ?
                new ObjectParameter("date_of_end", date_of_end) :
                new ObjectParameter("date_of_end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FUNC_COUNT_MOST_ORDERABLE_DAY_OF_WEEK_Result>("[Entities].[FUNC_COUNT_MOST_ORDERABLE_DAY_OF_WEEK](@date_of_begin, @date_of_end)", date_of_beginParameter, date_of_endParameter);
        }
    
        [DbFunction("Entities", "FUNC_GET_CATEGORY_STAT")]
        public virtual IQueryable<FUNC_GET_CATEGORY_STAT_Result> FUNC_GET_CATEGORY_STAT(Nullable<System.DateTime> date_of_begin, Nullable<System.DateTime> date_of_end)
        {
            var date_of_beginParameter = date_of_begin.HasValue ?
                new ObjectParameter("date_of_begin", date_of_begin) :
                new ObjectParameter("date_of_begin", typeof(System.DateTime));
    
            var date_of_endParameter = date_of_end.HasValue ?
                new ObjectParameter("date_of_end", date_of_end) :
                new ObjectParameter("date_of_end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FUNC_GET_CATEGORY_STAT_Result>("[Entities].[FUNC_GET_CATEGORY_STAT](@date_of_begin, @date_of_end)", date_of_beginParameter, date_of_endParameter);
        }
    
        [DbFunction("Entities", "FUNC_GET_THEMOST_BUYABLE_DISH")]
        public virtual IQueryable<FUNC_GET_THEMOST_BUYABLE_DISH_Result> FUNC_GET_THEMOST_BUYABLE_DISH(Nullable<int> id_cat)
        {
            var id_catParameter = id_cat.HasValue ?
                new ObjectParameter("id_cat", id_cat) :
                new ObjectParameter("id_cat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FUNC_GET_THEMOST_BUYABLE_DISH_Result>("[Entities].[FUNC_GET_THEMOST_BUYABLE_DISH](@id_cat)", id_catParameter);
        }
    
        [DbFunction("Entities", "FUNC_GET_THEMOST_INCOMABLE_DISH")]
        public virtual IQueryable<FUNC_GET_THEMOST_INCOMABLE_DISH_Result> FUNC_GET_THEMOST_INCOMABLE_DISH(Nullable<int> id_cat)
        {
            var id_catParameter = id_cat.HasValue ?
                new ObjectParameter("id_cat", id_cat) :
                new ObjectParameter("id_cat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FUNC_GET_THEMOST_INCOMABLE_DISH_Result>("[Entities].[FUNC_GET_THEMOST_INCOMABLE_DISH](@id_cat)", id_catParameter);
        }
    
        public virtual int PROC_COUNT_ORDE_FULL_PRICE(Nullable<int> iDOrder)
        {
            var iDOrderParameter = iDOrder.HasValue ?
                new ObjectParameter("IDOrder", iDOrder) :
                new ObjectParameter("IDOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_COUNT_ORDE_FULL_PRICE", iDOrderParameter);
        }
    
        public virtual int PROC_COUNT_ORDERDISH_TOTAL_PRICE(Nullable<int> iDOrderDish, Nullable<int> qTY)
        {
            var iDOrderDishParameter = iDOrderDish.HasValue ?
                new ObjectParameter("IDOrderDish", iDOrderDish) :
                new ObjectParameter("IDOrderDish", typeof(int));
    
            var qTYParameter = qTY.HasValue ?
                new ObjectParameter("QTY", qTY) :
                new ObjectParameter("QTY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_COUNT_ORDERDISH_TOTAL_PRICE", iDOrderDishParameter, qTYParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
